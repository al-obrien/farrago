% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transfer.R
\name{read_chunked}
\alias{read_chunked}
\title{Read files in chunks with \code{iotools::chunk.apply()}}
\usage{
read_chunked(
  file_location,
  filter_col,
  filter_v,
  col_types,
  chunk_function = NULL,
  chunk_size = 1000000L,
  rbind_method = rbind,
  sep = ",",
  header_check = TRUE,
  parallel = 1,
  ...
)
}
\arguments{
\item{file_location}{Location of target file to load (any file compatible with \code{\link[iotools]{dstrsplit}} and provided \code{sep} parameter).}

\item{filter_col}{Target column to perform filtering operation.}

\item{filter_v}{Vector of values to perform filtering on (categorical by default via \code{in} operator).}

\item{col_types}{A vector of values that specifies all of the column types in the file of interest, this is an \code{iotools} requirement.}

\item{chunk_function}{A custom function to perform instead of the default behaviour of filtering on a single column.}

\item{chunk_size}{Size of each chunk to perform operations (default: 1e6L).}

\item{rbind_method}{Function to perform the appending of chunks (default: \code{\link[base]{rbind}}, but other binding options can be used).}

\item{sep}{The delimiter type in the file of interest (default: ',').}

\item{header_check}{Boolean value, to determine if headers should be searched for based upon column names and dropped from the function calls.}

\item{parallel}{How many processes should be used in loading (default: 1).}

\item{...}{Other paramters passed to \code{\link[iotools]{dstrsplit}}.}
}
\value{
Dataframe (passed through the chunk-wise function)
}
\description{
\code{read_chunked} is a helper function that wraps around \code{\link[iotools]{chunk.apply}} to allow chunk-wise operations on data as it loads.
This is very similar to \code{\link{fread_chunked}}, though will perform much faster as it can run the chunks in parallel if desired. The drawback is it can be
a bit tricky to set up as it requires column type assignment.
}
\details{
This function by default will filter data based upon a provided column ID and filtering vector. However, a custom function can also be provided for more
flexible operations to be performed on each chunk. The common use-case is while working with extremely large data, where the entire dataset would never fit
into the available computer memory. When datasets contains much more information than needed for a particular analysis the chunk-wise filtering will ensure
data loaded is reduced to the filtering criteria required without, hopefully, hitting RAM limits. Providing column types for each column is important, assuming
them all as character may lead to errors and column length mismatches (causing the load to fail, e.g. \code{too many input columns}).

There are several options to perform chunk reading in R. In addition to this function, you could also
explore the package {chunked} and \code{readr::read_csv_chunked()}. However, at some point, it may be
more suitable to simply have the data stored in a database for more efficient operations outside of R.
}
\examples{
\dontrun{
file_of_interest <- '/path/to/file/myfile.csv'

# Predetermined column types of large complex file (may require manual review!)
file_coltypes <- c(rep('integer', 5), # First 5 are integer

# Filter based upon an ID column or similar
ids_of_interest <- c(1, 2, 3)
chunk_loaded_file <- read_chunked(file_of_interest, filter_col = recordID, filter_v = ids_of_interest)

# Example of custom provided function
# ... perform chunked load an filter if ID is in any of several columns
custom_chunk_f <- function(chunk) {
  data.table::setDT(chunk) # Set as data.table for speed of custom function...
  chunk[chunk[, Reduce(`|`, lapply(.SD, `\%in\%`, filter_v)),
                .SDcols = c('recordID1', 'recordID2', 'recordID3', 'recordID4', 'recordID5')]]
                }
 chunk_loaded_file <- read_chunked(file_of_interest, filter_v = ids_of_interest, col_types = file_coltypes,
                                   chunk_function = custom_chunk_f, rbind_method = rbind, parallel = 2)
}
}
\seealso{
fread_chunked
}
